"""
Игра «Пьяница».

У каждого игрока по 5 уникальных карт от 0 до 9.
На каждом ходу вскрываются верхние карты.
Большая карта побеждает меньшую, но 0 побеждает 9.
Победитель хода кладет под низ своей колоды сначала карту первого игрока, затем второго.
Игра продолжается до победы одного из игроков или до 10^6 ходов (в этом случае — ничья "botva").
"""


class Player:
    """
    Класс игрока в игре «Пьяница».

    Атрибуты:
        name (str): Имя игрока.
        deck (list): Колода игрока, первый элемент — верхняя карта.

    Методы:
        has_card(): Проверяет, остались ли карты.
        draw(): Вытягивает верхнюю карту.
        add_to_bottom(c1, c2): Кладёт карты под низ своей колоды (в порядке: сначала карта первого игрока, потом второго).
    """

    def __init__(self, name, cards):
        if len(cards) != 5:
            raise ValueError("Нужно ровно 5 карт для игрока.")
        for x in cards:
            if x < 0 or x > 9:
                raise ValueError("Карты должны быть от 0 до 9.")
        self.name = name
        self.deck = cards[:]

    def has_card(self):
        return len(self.deck) > 0

    def draw(self):
        return self.deck.pop(0)

    def add_to_bottom(self, c_first, c_second):
        self.deck.append(c_first)
        self.deck.append(c_second)


class DrunkardGame:
    """
    Класс, управляющий ходом игры «Пьяница».

    Атрибуты:
        p1 (Player): Первый игрок.
        p2 (Player): Второй игрок.
        max_turns (int): Максимум ходов до ничьей.
        turns (int): Счётчик текущего хода.

    Методы:
        beats(c1, c2): Определяет, побеждает ли c1 c2.
        play(): Запускает игру и выводит результат.
    """

    def __init__(self, deck1, deck2):
        all_cards = deck1 + deck2
        if sorted(all_cards) != list(range(10)):
            raise ValueError("Карты должны быть уникальными и от 0 до 9.")
        self.p1 = Player("first", deck1)
        self.p2 = Player("second", deck2)
        self.max_turns = 10**6
        self.turns = 0

    def beats(self, c1, c2):
        if c1 == 0 and c2 == 9:
            return True
        if c1 == 9 and c2 == 0:
            return False
        return c1 > c2

    def play(self):
        while self.p1.has_card() and self.p2.has_card():
            if self.turns >= self.max_turns:
                print("botva")
                return

            c1 = self.p1.draw()
            c2 = self.p2.draw()

            if self.beats(c1, c2):
                self.p1.add_to_bottom(c1, c2)
            else:
                self.p2.add_to_bottom(c1, c2)

            self.turns += 1

        if not self.p1.has_card():
            print("second", self.turns)
        else:
            print("first", self.turns)


def read_deck(prompt):
    """
    Читает колоду игрока из ввода.

    Аргументы:
        prompt (str): Сообщение пользователю.

    Возвращает:
        list[int]: Список из 5 целых чисел от 0 до 9.

    Исключения:
        ValueError: При недопустимом вводе.
    """
    line = input(prompt).strip().split()
    if len(line) != 5:
        raise ValueError("Нужно ввести ровно 5 чисел.")
    nums = []
    for x in line:
        if not x.isdigit():
            raise ValueError("Введите только цифры.")
        v = int(x)
        if v < 0 or v > 9:
            raise ValueError("Число должно быть от 0 до 9.")
        nums.append(v)
    return nums


def main():
    """
    Основная функция запуска игры.
    """
    print("Добро пожаловать в игру 'Пьяница'!")
    try:
        deck1 = read_deck("Введите 5 карт первого игрока: ")
        deck2 = read_deck("Введите 5 карт второго игрока: ")
        game = DrunkardGame(deck1, deck2)
        game.play()
    except ValueError as e:
        print("Ошибка:", e)
    except KeyboardInterrupt:
        print("\nИгра прервана пользователем.")


if __name__ == "__main__":
    main()
